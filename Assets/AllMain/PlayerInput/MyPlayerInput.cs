//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/AllMain/PlayerInput/MyPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyPlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyPlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyPlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""74284075-c81b-4e10-9700-65c0fd4fb6bc"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""32e08763-53a0-4f7a-96d3-e66a50961c1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""500bea2e-36dc-4d79-91f2-8751763053a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GetSword"",
                    ""type"": ""Button"",
                    ""id"": ""622cec1d-7e2d-44ef-8a61-086d0eb026c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GetAxe"",
                    ""type"": ""Button"",
                    ""id"": ""c4a55fe5-2737-4653-94dc-eb9b7a8b1b4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GetMace"",
                    ""type"": ""Button"",
                    ""id"": ""93e6f69a-b3d9-455e-a687-47364e526c6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22369728-0dad-4c01-91d2-9c33fb294f33"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30e5b4fd-a24e-46fb-b4e6-34c08a0b99b3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetSword"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcfd9f05-3f98-4f4f-983a-1c9f1658bb1d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetAxe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdcb67ba-e1e3-4c33-9ce6-eb191a023320"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetMace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14f6c981-0300-48f9-813c-534c2408d7fd"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_Block = m_Player.FindAction("Block", throwIfNotFound: true);
        m_Player_GetSword = m_Player.FindAction("GetSword", throwIfNotFound: true);
        m_Player_GetAxe = m_Player.FindAction("GetAxe", throwIfNotFound: true);
        m_Player_GetMace = m_Player.FindAction("GetMace", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_Block;
    private readonly InputAction m_Player_GetSword;
    private readonly InputAction m_Player_GetAxe;
    private readonly InputAction m_Player_GetMace;
    public struct PlayerActions
    {
        private @MyPlayerInput m_Wrapper;
        public PlayerActions(@MyPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @Block => m_Wrapper.m_Player_Block;
        public InputAction @GetSword => m_Wrapper.m_Player_GetSword;
        public InputAction @GetAxe => m_Wrapper.m_Player_GetAxe;
        public InputAction @GetMace => m_Wrapper.m_Player_GetMace;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Block.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlock;
                @GetSword.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGetSword;
                @GetSword.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGetSword;
                @GetSword.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGetSword;
                @GetAxe.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGetAxe;
                @GetAxe.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGetAxe;
                @GetAxe.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGetAxe;
                @GetMace.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGetMace;
                @GetMace.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGetMace;
                @GetMace.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGetMace;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
                @GetSword.started += instance.OnGetSword;
                @GetSword.performed += instance.OnGetSword;
                @GetSword.canceled += instance.OnGetSword;
                @GetAxe.started += instance.OnGetAxe;
                @GetAxe.performed += instance.OnGetAxe;
                @GetAxe.canceled += instance.OnGetAxe;
                @GetMace.started += instance.OnGetMace;
                @GetMace.performed += instance.OnGetMace;
                @GetMace.canceled += instance.OnGetMace;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
        void OnGetSword(InputAction.CallbackContext context);
        void OnGetAxe(InputAction.CallbackContext context);
        void OnGetMace(InputAction.CallbackContext context);
    }
}
